
// Author: JcSun

import "./poseidon/PoseidonNeptuneU2bn256" as hasher2;
import "./poseidon/hash-recursive" as hasherR;

def hash_leaf(field[6] mut leaf) -> field {
    return hasherR(leaf);
}

def main(field[6] mut leaf, u32 N, field[50] merkleProof) -> field {
    field mut res = hash_leaf(leaf);

    u32 Np2 = N / 2;

    field mut s = 0;
    for u32 i in 0..50 {
        s = s + merkleProof[i];
    }
    assert(s > 0);

    for u32 i in 0..50 {
        log(" {}, {}", i, merkleProof[i]);
    }

    for u32 it in 0..25 {
        u32 i = (N - (it * 2 + 2)) % N; 
        u32 ip1 = (N - (it * 2 + 1) ) % N;

        field side = if it < Np2 { merkleProof[i] } else { 0 }; 
        field val = if it < Np2 { merkleProof[ip1] } else { 0 };

        field i0 = if side == 0 { val } else { res };
        field i1 = if side == 0 { res } else { val };

        res = if (it < Np2) {
            hasher2([i0, i1])
        } else {
            res
        };
    }

    return res;
}
