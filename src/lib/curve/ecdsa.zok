from "./ec" import Curve, AffinePoint, add, mul, make_non_identity_point;

// bits: MSB first
def internal_repr(field[256] bits) -> field {
    field mut y = 0;
    field mut base = 1;
    for u32 i in 0..256 {
        y = y + base * bits[255-i];
        base = base * 2;
    }
    return y;
}

def is_bit_repr(field x, field[256] bits) -> bool {
    field y = internal_repr(bits);
    return y == x;
}


def recover_public_key(Curve ec, AffinePoint r, field[256] s_bits, field commitment, field[256] s_rx_bits, field[256] m_rx_bits) -> AffinePoint {
    field s = internal_repr(s_bits);

    log("s: {}", s);

    field s_rx = s / r.x;

    log("s_rx: {}", s_rx);

    assert(is_bit_repr(s_rx, s_rx_bits));

    field m_rx = commitment / r.x;

    assert(is_bit_repr(m_rx, m_rx_bits));

    AffinePoint s_rx_r = mul(r, s_rx_bits, ec);

    AffinePoint m_r_x_g = mul(ec.generator, m_rx_bits, ec);

    AffinePoint m_r_x_g_neg = make_non_identity_point([m_r_x_g.x, -m_r_x_g.y]);

    AffinePoint signer = add(s_rx_r, m_r_x_g_neg, ec);

    return signer;
}