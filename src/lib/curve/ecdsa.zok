from "./ec" import Curve, AffinePoint, add, mul, make_non_identity_point, is_same;

// bits: MSB first
def make_repr(field[256] bits) -> field {
    field mut y = 0;
    field mut base = 1;
    for u32 i in 0..256 {
        field bit = bits[255-i];
        assert(bit == 0 || bit == 1);
        y = y + base * bit;
        base = base * 2;
    }
    return y;
}

def is_bit_repr(field x, field[256] bits) -> bool {
    field y = make_repr(bits);
    return y == x;
}

def verify_ecdsa(Curve ec, field[256] rx_bits, field rx, field ry, field[256] s_bits, field[256] commitment_bits, AffinePoint pk) -> bool {
    field rx = make_repr(rx_bits);

    AffinePoint r = make_non_identity_point([rx, ry]);

    AffinePoint sr = mul(r, s_bits, ec);

    AffinePoint rp = mul(pk, rx_bits, ec);

    AffinePoint m = mul(ec.generator, commitment_bits, ec);

    AffinePoint left = sr;
    AffinePoint right = add(rp, m, ec);
    
    return is_same(left, right);
}
